apiVersion: apps/v1
kind: Deployment
metadata:
  name: #{aksappname}#
  labels:
    app: everyeng-#{aksappname}#      
    app.kubernetes.io/name: #{aksappname}#
    app.kubernetes.io/version: "#{Build.BuildId}#"
    app.kubernetes.io/managed-by: yaml
    app.kubernetes.io/component: appsection-#{appsectionname}#
    app.kubernetes.io/part-of: part-#{apppartname}#
spec:
  selector:
    matchLabels:
      app: #{aksappname}#
  replicas: @{aksappcount}@
  revisionHistoryLimit: 2
  template:
    metadata:
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9080"
        prometheus.io/path: "/metrics"
      labels:
       app: #{aksappname}#
    spec:
      containers:
      - name: #{aksappname}#
        image: #{akscontainerpath}#/#{aksappname}#:#{Build.BuildId}#
        imagePullPolicy: IfNotPresent
        env:       

        - name: "ASPNETCORE_FORWARDEDHEADERS_ENABLED"
          value: "true"

        - name: "UseVault"
          value: "true"       

        - name: "AzureKeyVaultName"          
          valueFrom:
           configMapKeyRef:
            name: '@{clusterkey}@'
            key: AzureKeyVaultNameKey

        - name: "TenantId"           
          valueFrom:
           configMapKeyRef:
            name: '@{clusterkey}@'
            key: TenantIdKey

        - name: "useMachineName"           
          value: "false"  

        - name: "ManagedIdentityId"          
          valueFrom:
           configMapKeyRef:
            name: '@{clusterkey}@'
            key: ManagedIdentityIdKey

        - name: "ApplicationInsightsConnectionString"          
          valueFrom:
           configMapKeyRef:
            name: '@{clusterkey}@'
            key: ApplicationInsightsConnectionStringKey
        resources:
          requests:
           cpu: #{aksappcpu}#
           memory: #{aksappmem}#  
        ports:
        - containerPort: 80      
        - containerPort: 443

  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0